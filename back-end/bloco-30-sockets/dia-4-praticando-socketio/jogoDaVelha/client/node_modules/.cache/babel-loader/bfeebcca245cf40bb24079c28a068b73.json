{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/trybe-exercises/back-end/bloco-30-sockets/dia-4-praticando-socketio/jogoDaVelha/client/src/components/Boards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { QuadradoButton, QuadradosContainer } from \"./Quadrado.elements\";\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\n\nconst Board = () => {\n  _s();\n\n  const [boardState, setBoardState] = useState(Array(9).fill(null));\n  const [playerI, setPlayerI] = useState('');\n  const [playerXTurn, setPlayerXTurn] = useState(true);\n\n  const handleClick = (e, index) => {\n    // const quadrados = boardState.slice();\n    const newArray = [...boardState];\n    newArray[index] = playerXTurn ? 'X' : 'O';\n    return setBoardState(newArray);\n  };\n\n  useEffect(() => {\n    socket.on('getArray', _ref => {\n      let {\n        array,\n        socketId\n      } = _ref;\n      setBoardState(array);\n      setPlayerI(socketId);\n    });\n  }, []);\n  useEffect(() => {\n    socket.emit('updateArray', boardState);\n  }, [boardState]);\n  socket.on('refreshArray', updatedArray => {\n    setBoardState(updatedArray);\n  });\n  return /*#__PURE__*/_jsxDEV(QuadradosContainer, {\n    children: boardState.map((pos, index) => /*#__PURE__*/_jsxDEV(QuadradoButton, {\n      onClick: e => handleClick(e, index),\n      children: pos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 40\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"YhYhibo/B+fZJqY/bqVBW07koH8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jossanymoura/Dev/trybe-exercises/back-end/bloco-30-sockets/dia-4-praticando-socketio/jogoDaVelha/client/src/components/Boards.js"],"names":["React","useState","useEffect","QuadradoButton","QuadradosContainer","io","socket","Board","boardState","setBoardState","Array","fill","playerI","setPlayerI","playerXTurn","setPlayerXTurn","handleClick","e","index","newArray","on","array","socketId","emit","updatedArray","map","pos"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAkD,qBAAlD;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAA5C;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,IAAD,CAA9C;;AAEA,QAAMe,WAAW,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAChC;AACA,UAAMC,QAAQ,GAAG,CAAC,GAAGX,UAAJ,CAAjB;AACAW,IAAAA,QAAQ,CAACD,KAAD,CAAR,GAAkBJ,WAAW,GAAG,GAAH,GAAS,GAAtC;AACA,WAAOL,aAAa,CAACU,QAAD,CAApB;AACD,GALD;;AAOAjB,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACc,EAAP,CAAU,UAAV,EAAsB,QAAuB;AAAA,UAAtB;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAsB;AAC3Cb,MAAAA,aAAa,CAACY,KAAD,CAAb;AACAR,MAAAA,UAAU,CAACS,QAAD,CAAV;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOApB,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACiB,IAAP,CAAY,aAAZ,EAA2Bf,UAA3B;AACD,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIAF,EAAAA,MAAM,CAACc,EAAP,CAAU,cAAV,EAA2BI,YAAD,IAAkB;AAC1Cf,IAAAA,aAAa,CAACe,YAAD,CAAb;AACD,GAFD;AAIA,sBACE,QAAC,kBAAD;AAAA,cAEIhB,UAAU,CAACiB,GAAX,CAAe,CAACC,GAAD,EAAMR,KAAN,kBAAgB,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAGD,CAAD,IAAOD,WAAW,CAACC,CAAD,EAAIC,KAAJ,CAA3C;AAAA,gBAAwDQ;AAAxD;AAAA;AAAA;AAAA;AAAA,YAA/B;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAlCD;;GAAMnB,K;;KAAAA,K;AAoCN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { QuadradoButton, QuadradosContainer } from\"./Quadrado.elements\";\nimport { io } from 'socket.io-client';\n\nconst socket = io('http://localhost:3001');\n\nconst Board = () => {\n  const [boardState, setBoardState] = useState(Array(9).fill(null));\n  const [playerI, setPlayerI] = useState('');\n  const [playerXTurn, setPlayerXTurn] = useState(true);\n\n  const handleClick = (e, index) => {\n    // const quadrados = boardState.slice();\n    const newArray = [...boardState];\n    newArray[index] = playerXTurn ? 'X' : 'O';\n    return setBoardState(newArray);\n  }\n\n  useEffect(() => {\n    socket.on('getArray', ({array, socketId}) => {\n      setBoardState(array);\n      setPlayerI(socketId);\n    })\n  }, []);\n\n  useEffect(() => {\n    socket.emit('updateArray', boardState);\n  }, [boardState]);\n\n  socket.on('refreshArray', (updatedArray) => {\n    setBoardState(updatedArray);\n  })\n\n  return(\n    <QuadradosContainer>\n      {\n        boardState.map((pos, index) => <QuadradoButton onClick={(e) => handleClick(e, index)}>{pos}</QuadradoButton>)\n      }\n    </QuadradosContainer>\n  )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}